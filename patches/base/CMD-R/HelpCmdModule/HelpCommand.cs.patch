diff --git a/CMD-R/HelpCmdModule/HelpCommand.cs b/CMD-R/HelpCmdModule/HelpCommand.cs
index edc6386..72b4463 100644
--- a/CMD-R/HelpCmdModule/HelpCommand.cs
+++ b/CMD-R/HelpCmdModule/HelpCommand.cs
@@ -8,7 +8,7 @@ using System.Threading;
 
 namespace CMDR.HelpCmdModule
 {
-    public class HelpCommand : SystemCommand
+    public class HelpCommand : SystemCommand, DmSupportedCommand
     {
         public override string commandid => "help";
 
@@ -151,12 +151,13 @@ namespace CMDR.HelpCmdModule
                 if (!Bot.GetBot().CheckPermissions(command.permissionnode, user, guild)) {
                     continue;
                 }
-                if (currentPage.Length + 3 >= 2000) {
+                string msg = ("\n - " + command.commandid + (command.helpsyntax == "" ? "" : " " + command.helpsyntax) + " - " + command.description);
+                if (currentPage.Length + msg.Length + 3 >= 2000) {
                     currentPage += "```";
                     pages.Add(currentPage);
                     currentPage = "```A list of known commands (page " + pages.Count + "):";
                 }
-                currentPage += ("\n - " + command.commandid + (command.helpsyntax == "" ? "" : " " + command.helpsyntax) + " - " + command.description);    
+                currentPage += msg;    
             }
             if (currentPage.Length != ("```A list of known commands (page " + pages.Count + "):").Length)
             {
@@ -166,7 +167,253 @@ namespace CMDR.HelpCmdModule
 
             Discord.Rest.RestUserMessage message = await channel.SendMessageAsync(pages[page]);
 
-            Func<Cacheable<IUserMessage, ulong>, ISocketMessageChannel, SocketReaction, Task> handler = new Func<Cacheable<IUserMessage, ulong>, ISocketMessageChannel, SocketReaction, Task>((arg1, arg2, arg3) =>
+            Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task> handler = new Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task>((arg0, arg1, arg3) =>
+            {
+                if (arg3.MessageId == message.Id && arg3.Channel.Id == message.Channel.Id)
+                {
+                    if (arg3.Emote.Name == em1.Name)
+                    {
+                        bool changed = false;
+                        var v = message.GetReactionUsersAsync(em1, int.MaxValue).GetAsyncEnumerator();
+                        while (true)
+                        {
+                            if (v.Current != null)
+                                foreach (IUser usr in v.Current)
+                                    if (!usr.Id.Equals(Bot.GetBot().client.CurrentUser.Id))
+                                    {
+                                        message.RemoveReactionAsync(em1, usr).GetAwaiter().GetResult();
+                                        changed = true;
+                                    }
+                            if (!v.MoveNextAsync().GetAwaiter().GetResult())
+                                break;
+                        }
+                        if (changed)
+                        {
+                            page--;
+
+                            var oldmsg = message;
+                            message = channel.SendMessageAsync(pages[page]).GetAwaiter().GetResult();
+                            oldmsg.DeleteAsync().GetAwaiter().GetResult();
+
+                            if (page != 0)
+                                message.AddReactionAsync(em1).GetAwaiter().GetResult();
+                            if (page != pages.Count - 1)
+                                message.AddReactionAsync(em2).GetAwaiter().GetResult();
+                        }
+                    }
+                    if (arg3.Emote.Name == em2.Name)
+                    {
+                        bool changed = false;
+                        var v = message.GetReactionUsersAsync(em2, int.MaxValue).GetAsyncEnumerator();
+                        while (true)
+                        {
+                            if (v.Current != null)
+                                foreach (IUser usr in v.Current)
+                                    if (!usr.Id.Equals(Bot.GetBot().client.CurrentUser.Id))
+                                    {
+                                        message.RemoveReactionAsync(em1, usr).GetAwaiter().GetResult();
+                                        changed = true;
+                                    }
+                            if (!v.MoveNextAsync().GetAwaiter().GetResult())
+                                break;
+                        }
+                        if (changed)
+                        {
+                            page++;
+
+                            var oldmsg = message;
+                            message = channel.SendMessageAsync(pages[page]).GetAwaiter().GetResult();
+                            oldmsg.DeleteAsync().GetAwaiter().GetResult();
+
+                            if (page != 0)
+                                message.AddReactionAsync(em1).GetAwaiter().GetResult();
+                            if (page != pages.Count - 1)
+                                message.AddReactionAsync(em2).GetAwaiter().GetResult();
+                        }
+                    }
+                }
+                return null;
+            });
+
+            new Thread(() => {
+                Bot.GetBot().client.ReactionAdded += handler;
+                Bot.GetBot().client.MessageDeleted += (arg11, arg22) =>
+                {
+                    if (arg11.Id == message.Id)
+                        Bot.GetBot().client.ReactionAdded -= handler;
+                    return null;
+                };
+                
+                if (pages.Count != 1)
+                {
+                    if (page != pages.Count)
+                        message.AddReactionAsync(em2).GetAwaiter().GetResult();
+                }
+            }).Start();
+        }
+
+        public override void OnExecuteFromTerminal(string fullcommand, string arguments_string, List<string> arguments)
+        {
+
+        }
+
+        public async Task OnExecuteFromDM(SocketUser user, SocketDMChannel channel, SocketMessage messageobject, string fullmessage, string arguments_string, List<string> arguments)
+        {
+            int page = 0;
+            List<string> pages = new List<string>();
+
+            Emoji em1 = new Emoji("\u23EE");
+            Emoji em2 = new Emoji("\u23ED");
+
+            String currentPage = "```A list of known commands:";
+            List<SystemCommand> commands = new List<SystemCommand>();
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    bool found = false;
+                    foreach (CmdCategory cat in command.Categories) {
+                        if (cat.name.ToLower() == arguments[0].ToLower()) {
+                            found = true;
+                            break;
+                        }
+                    }
+                    if (!found)
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    bool found = false;
+                    foreach (CmdCategory cat in command.Categories) {
+                        if (cat.name.ToLower().StartsWith(arguments[0].ToLower())) {
+                            found = true;
+                            break;
+                        }
+                    }
+                    if (!found)
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    bool found = false;
+                    foreach (CmdCategory cat in command.Categories) {
+                        if (cat.name.ToLower().Contains(arguments[0].ToLower())) {
+                            found = true;
+                            break;
+                        }
+                    }
+                    if (!found)
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    if (command.commandid.ToLower() != arguments[0].ToLower())
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    if (!command.commandid.ToLower().StartsWith(arguments[0].ToLower()))
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    if (!command.commandid.ToLower().Contains(arguments[0].ToLower()))
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    if (!command.description.ToLower().StartsWith(arguments[0].ToLower()))
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in GetBot().commands)
+            {
+                if (!(command is DmSupportedCommand))
+                    continue;
+                if (arguments.Count != 0) {
+                    if (!command.description.ToLower().Contains(arguments[0].ToLower()))
+                        continue;
+                }
+
+                if (!commands.Contains(command))
+                    commands.Add(command);
+            }
+
+            foreach (SystemCommand command in commands) {
+                if (!Bot.GetBot().CheckPermissions(command.permissionnode, user, null)) {
+                    continue;
+                }
+                string msg = ("\n - " + command.commandid + (command.helpsyntax == "" ? "" : " " + command.helpsyntax) + " - " + command.description);
+                if (currentPage.Length + msg.Length + 3 >= 2000) {
+                    currentPage += "```";
+                    pages.Add(currentPage);
+                    currentPage = "```A list of known commands (page " + pages.Count + "):";
+                }
+                currentPage += msg;
+            }
+            if (currentPage.Length != ("```A list of known commands (page " + pages.Count + "):").Length)
+            {
+                currentPage += "```";
+                pages.Add(currentPage);
+            }
+
+            Discord.Rest.RestUserMessage message = await channel.SendMessageAsync(pages[page]);
+
+            Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task> handler = new Func<Cacheable<IUserMessage, ulong>, Cacheable<IMessageChannel, ulong>, SocketReaction, Task>((arg0, arg1, arg3) =>
             {
                 if (arg3.MessageId == message.Id && arg3.Channel.Id == message.Channel.Id)
                 {
@@ -248,10 +495,5 @@ namespace CMDR.HelpCmdModule
                    await message.AddReactionAsync(em2);
             }
         }
-
-        public override void OnExecuteFromTerminal(string fullcommand, string arguments_string, List<string> arguments)
-        {
-
-        }
     }
 }
