diff --git a/CMD-R/Program.cs b/CMD-R/Program.cs
index fc7bc02..8ff4e22 100644
--- a/CMD-R/Program.cs
+++ b/CMD-R/Program.cs
@@ -109,9 +109,9 @@ namespace CMDR
             Console.ForegroundColor = b;
 
             path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location);
-            Bot.WriteLine("Booting CMD-R...");
-            Bot.WriteLine("AerialWorks CMD-R is Free(Libre) and Open Source Software (FLOSS),\nand will always be licensed under the GPL-2.0 license.");
-            Bot.WriteLine("------------------------------------------------------------------");
+            Bot.WriteLine("Booting CMD-R (Ultimate Commander Version)...");
+            Bot.WriteLine("AerialWorks Ultimate Commander is Free(Libre) and Open Source Software (FLOSS),\nand will always be licensed under the GPL-2.0 license.");
+            Bot.WriteLine("-------------------------------------------------------------------------------");
             Bot.WriteLine();
             Bot.WriteLine("System path: " + path);
             Directory.CreateDirectory(path + "/Modules");
@@ -133,7 +133,7 @@ namespace CMDR
 
             Console.CancelKeyPress += new ConsoleCancelEventHandler(delegate (Object sender, ConsoleCancelEventArgs e) {
                 if (e.SpecialKey == ConsoleSpecialKey.ControlBreak) {
-                    Bot.WriteLine("Shutting down CMD-R, CTRL+BREAK detected...");
+                    Bot.WriteLine("Shutting down Ultimate Commander, CTRL+BREAK detected...");
                     client.SetGameAsync("Shutting down...").GetAwaiter().GetResult();
                     client.SetStatusAsync(UserStatus.Invisible).GetAwaiter().GetResult();
                     client.StopAsync().GetAwaiter().GetResult();
@@ -145,17 +145,20 @@ namespace CMDR
                 e.Cancel = true;
             });
             Bot.WriteLine("Starting Discord.NET framework...");
-            client = new DiscordSocketClient();
+            client = new DiscordSocketClient(new DiscordSocketConfig(){
+                GatewayIntents = GatewayIntents.All
+            });
 
             await client.LoginAsync(TokenType.Bot, token);
             await client.StartAsync();
-            await client.SetGameAsync("Starting CMD-R...");
+            await client.SetGameAsync("Starting Ultimate Commander...");
 
             if (newToken) {
                 Bot.WriteLine("\nSaved to file Bot.cfg, edit it to change the token.");
                 File.WriteAllText(path + "/Bot.cfg", token);
             }
 
+            Bot.WriteLine("Waiting for servers to load... Please note that the bot needs to be in at least ONE server for it to load.");
             while (client.ConnectionState == ConnectionState.Connecting || client.ConnectionState == ConnectionState.Disconnected) { Thread.Sleep(100); }
             while (client.Guilds.Count == 0 || client.Guilds.FirstOrDefault().Name == null || client.Guilds.FirstOrDefault().Name == "") { Thread.Sleep(100); }
 
@@ -213,9 +216,9 @@ namespace CMDR
             // Load CMF (Cyan Modfile) formatted packages
             // CMF are zips too, just like jars
             //
-            // By allowing CMFs to be loaded in  CMD-R, one can create a one-fits-all package
+            // By allowing CMFs to be loaded in Ultimate Commander, one can create a one-fits-all package
             // When you create a Connective module, you can add a pointer file, dll, and mod.manifest.ccfg document
-            // to make it compatible with CMD-R, Connective and Cyan. (if you combine the packages)
+            // to make it compatible with Ultimate Commander, Connective and Cyan. (if you combine the packages)
             foreach (FileInfo info in new DirectoryInfo(path + "/Module Packages").GetFiles("*.cmf"))
             {
                 loadPackage(info);
@@ -293,9 +296,9 @@ namespace CMDR
                             b = Console.ForegroundColor;
                             Console.ForegroundColor = ConsoleColor.Red;
                             Bot.WriteLine("CRITICAL ERROR: Unable to restore or save storage folder, one already exists in both temp and install output!");
-                            Bot.WriteLine("DO NOT RESTART CMD-R BEFORE FIXING THIS ERROR OR FILES WILL GET LOST!");
+                            Bot.WriteLine("DO NOT RESTART ULTIMATE COMMANDER BEFORE FIXING THIS ERROR OR FILES WILL GET LOST!");
                             Console.ForegroundColor = b;
-                            throw new FieldAccessException("Unable to move storage back to origin, already exists, consider CMD-R crashed.");
+                            throw new FieldAccessException("Unable to move storage back to origin, already exists, consider Ultimate Commander crashed.");
                         }
                         if (Directory.Exists(path + "/temp/Storage"))
                         {
@@ -401,7 +404,7 @@ namespace CMDR
             await client.SetGameAsync("");
             while (true)
             {
-                string command = Terminal.ReadLine().Replace("\0", "");
+                string command = Terminal.ReadLine("CMD-R: $<path>").Replace("\0", "");
                 if (command == "quit" || command == "exit")
                 {
                     await client.SetGameAsync("Shutting down...");
@@ -608,7 +611,7 @@ namespace CMDR
         {
             if (classname == "{auto}") classname = filename;
             if (namespacepath == "{auto}") namespacepath = filename;
-            Bot.WriteLine("Loading module file: " + filefolder + Path.DirectorySeparatorChar + filename + ".dll");
+            Bot.WriteLine("Loading module file: " + filefolder + Path.DirectorySeparatorChar + filename + "-" + namespacepath + "." + classname + ".dll");
             AppDomain currentDomain = AppDomain.CurrentDomain;
             currentDomain.AssemblyResolve += new ResolveEventHandler(LoadFromSameFolder);
 
@@ -620,14 +623,18 @@ namespace CMDR
                 Assembly assembly = Assembly.LoadFrom(assemblyPath);
                 return assembly;
             }
-            Assembly asm = Assembly.LoadFrom(filefolder + Path.DirectorySeparatorChar + filename + ".dll");
+
+            if (File.Exists(filefolder + Path.DirectorySeparatorChar + filename + ".dll"))
+                File.Move(filefolder + Path.DirectorySeparatorChar + filename + ".dll", filefolder + Path.DirectorySeparatorChar + filename + "-" + namespacepath + "." + classname + ".dll", true);
+                
+            Assembly asm = Assembly.Load(File.ReadAllBytes(filefolder + Path.DirectorySeparatorChar + filename + "-" + namespacepath + "." + classname + ".dll"));
             Type type = asm.GetType(namespacepath + "." + classname);
 
             var script = Activator.CreateInstance(type) as BotModule;
 
             if (script == null)
             {
-                Bot.WriteLine("Module file: '" + filefolder + Path.DirectorySeparatorChar + filename + ".dll' does not have a class named " + classname + " in a namespace named " + namespacepath + ", cannot load it, skipping...");
+                Bot.WriteLine("Module file: '" + filefolder + Path.DirectorySeparatorChar + filename + "-" + namespacepath + "." + classname + ".dll' does not have a class named " + classname + " in a namespace named " + namespacepath + ", cannot load it, skipping...");
             }
             else
             {
@@ -635,13 +642,13 @@ namespace CMDR
                 Bot.WriteLine("Loading module: " + script.id + "...");
                 Bot.WriteLine("Module description: " + script.moduledesctiption);
                 Bot.GetBot().modules.Add(script);
-                Directory.CreateDirectory(Bot.GetBot().path + "/Modules/" + script.id + "/Storage");
-                if (!File.Exists(Bot.GetBot().path + "/Modules/" + script.id + "/Storage/config.xml") && File.Exists(Bot.GetBot().path + "/Modules/" + script.id + "/config-defaults.xml"))
+                Directory.CreateDirectory(filefolder + "/Storage");
+                if (!File.Exists(filefolder + "/Storage/config.xml") && File.Exists(filefolder + "/config-defaults.xml"))
                 {
-                    File.Copy(Bot.GetBot().path + "/Modules/" + script.id + "/config-defaults.xml", Bot.GetBot().path + "/Modules/" + script.id + "/Storage/config.xml");
+                    File.Copy(filefolder + "/config-defaults.xml", filefolder + "/Storage/config.xml");
                 }
                 script.modulepath = Path.GetFullPath(filefolder + Path.DirectorySeparatorChar + filename + ".dll");
-                script.storagepath = Path.GetFullPath(Bot.GetBot().path + Path.DirectorySeparatorChar + "Modules" + Path.DirectorySeparatorChar + script.id + Path.DirectorySeparatorChar + "Storage");
+                script.storagepath = Path.GetFullPath(filefolder + Path.DirectorySeparatorChar + "Storage");
                 script.LoadConfig();
                 Bot.WriteLine("Pre-initializing module: " + script.id + "...");
                 script.PreInit(Bot.GetBot());
@@ -650,6 +657,24 @@ namespace CMDR
             }
         }
 
+        public BotModule GetModule(string module) {
+            foreach (BotModule mod in modules) {
+                if (mod.id == module) {
+                    return mod;
+                }
+            }
+            return null;
+        }
+
+        public bool IsModuleLoaded(string module) {
+            foreach (BotModule mod in modules) {
+                if (mod.id == module) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
 #pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
         private async Task Client_RoleDeleted(SocketRole arg)
 #pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
@@ -862,8 +887,46 @@ namespace CMDR
                     await message.Channel.SendMessageAsync("I am sorry, but i don't recognize that command, use " + prefix + "help for commands.");
                 }
             }
-            else if (message.Channel is SocketDMChannel && message.Author.Id != client.CurrentUser.Id) await msg.Channel.SendMessageAsync("```diff\n- I am sorry, but CMD-R do not support direct messages yet.\n- Please go to a server and run " + prefix + "help for a list of commands```");
-            else {
+            else if (message.Channel is SocketDMChannel && message.Author.Id != client.CurrentUser.Id) {
+                bool found = false;
+                foreach (SystemCommand cmd in commands)
+                {
+                    if (cmd is DmSupportedCommand)
+                    {
+                        DmSupportedCommand wrapper = (DmSupportedCommand)cmd;
+                        string fullcmd = message.Content;
+                        if (fullcmd.StartsWith(prefix)) {
+                            fullcmd = fullcmd.Substring(prefix.Length);
+                        }
+                        
+                        string cmdid = fullcmd;
+                        string arguments = "";
+                        if (fullcmd.Contains(" "))
+                        {
+                            arguments = cmdid.Substring(cmdid.IndexOf(" ", StringComparison.CurrentCulture) + 1);
+                            cmdid = cmdid.Remove(cmdid.IndexOf(" ", StringComparison.CurrentCulture));
+                        }
+
+                        if (cmd.commandid.ToLower() == cmdid.ToLower())
+                        {
+                            if (CheckPermissions(cmd.permissionnode, msg.Author, null))
+                            {
+                                await wrapper.OnExecuteFromDM(msg.Author, (SocketDMChannel) msg.Channel, msg, fullcmd, arguments, GetArgumentListFromString(arguments));
+                            }
+                            else
+                            {
+                                await message.Channel.SendMessageAsync("```diff\n- I am sorry, but you are not allowed to run that command```");
+                            }
+                            found = true;
+                            break;
+                        }
+                    }
+                }
+                if (!found)
+                {
+                    await message.Channel.SendMessageAsync("I am sorry, but i don't recognize that DM command, use help for commands.");
+                }
+            } else {
                 foreach (SystemCommand cmd in commands)
                 {
                     if (cmd.allowDiscord && cmd.setNoCmdPrefix)
