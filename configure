#!/bin/bash
chmod +x build.sh
chmod +x applypatches.sh
chmod +x buildpatches.sh
chmod +x clean.sh

requiredvermsbuild=15.6.0.0
requiredvernuget=5.6.0.6591
requiredvermake=4.3
requiredvergit=2.28.0
requiredverdotnet=5.0.205
requiredverscreen=4.08.00

missingdepends=false
echo Searching for make...
if command -v make &> /dev/null 
then
    requiredver=$requiredvermake
    currentver="$(make --version|grep --only-matching --perl-regexp "\\d+\.\\d+")"
    packagename=make
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    makeinstalled=$installed
else
    echo make is NOT installed.
    makeinstalled=false
    missingdepends=true
fi

echo Searching for Git...
if command -v git &> /dev/null 
then
    requiredver=$requiredvergit
    currentver="$(git --version|grep --only-matching --perl-regexp "\\d+\.\\d+\.\\d+")"
    packagename=Git
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    gitinstalled=$installed
else
    echo Git is NOT installed.
    makeinstalled=false
    missingdepends=true
fi

echo Searching for screen...
if command -v screen &> /dev/null 
then
    requiredver=$requiredverscreen
    currentver="$(screen --version | sed -E "s/.* version (.*) .* .*/\\1/g")"
    packagename=Screen
    installed=false
    
    if [ "$(printf '%s\n' "$requiredver" "$currentver" | sort -V | head -n1)" = "$requiredver" ]; then 
        echo $packagename is installed.
        installed=true
    else
        echo $packagename is installed but OUTDATED, minimal version: $requiredver, current version: $currentver
        installed=false
        missingdepends=true
    fi
    
    screeninstalled=$installed
else
    echo Screen is NOT installed.
    screeninstalled=false
    missingdepends=true
fi

if [ $missingdepends == "true" ]; then
    echo
    echo You are missing the following dependencies:
    if [ "$dotnetinstalled" == "false" ]; then 
        echo Mono version $requiredverdotnet or above.
    fi
    if [ "$msbuildinstalled" == "false" ]; then 
        echo MSBuild version $requiredvermsbuild or above.
    fi
    if [ "$nugetinstalled" == "false" ]; then 
        echo NuGet version $requiredvernuget or above.
    fi
    if [ "$makeinstalled" == "false" ]; then 
        echo Make version $requiredvermake or above.
    fi
    if [ "$gitinstalled" == "false" ]; then 
        echo Git version $requiredvergit or above.
    fi
    if [ "$screeninstalled" == "false" ]; then 
        echo Screen version $requiredverscreen or above.
    fi
    exit 1
fi

echo Cloning repositories...
echo Cloning CMD-R base...

rm -rf work
mkdir "work"
cd work

rm -rf base-project

function exitfail() {
    rm -rf work
    
    exit 1
}
git clone https://github.com/Stefan0436/CMD-R.git base-project || exitfail

echo Cloning module projects...
for module in ../modules/*; do
    if [ "$module" == "../modules/*" ]; then
        break
    fi
    source "$module"
    echo "Downloading $module..."
    
    rm -rf "module-projects/$module"
    git clone "$url" "module-projects/$module"
done

cd ..
